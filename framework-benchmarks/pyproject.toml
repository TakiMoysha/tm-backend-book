[project]
name = "framework-benchmarks"
version = "0.1.0"
description = "Comparison of performance of Python frameworks for the backend."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "argparse>=1.4.0",
  "pydantic>=2.10.4",
  "python-dotenv>=1.0.1",
  "advanced-alchemy[uuid]>=0.10.0",
  "structlog>=24.4.0",
  "aiosqlite>=0.20.0",
  "httptools",
]

[project.scripts]
server_emmett = "ser_emmett.__main__:dev"
server_litestar = "ser_litestar.__main__:dev"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build]
dev-mode-dirs = ["src/"]
include = ["CHANGELOG.md", "public/**/*", "src/**/*.sql"]
packages = ["src/ser_emmett", "src/ser_litestar"]

[tool.uv]
default-groups = ["nvim", "dev", "docs", "linting", "test"]

[dependency-groups]
dev = [
  { include-group = "nvim" },
  { include-group = "docs" },
  { include-group = "linting" },
  { include-group = "test" },
]
nvim = ["basedpyright>=1.23.1", "black>=24.10.0"]
docs = ["git-cliff>=2.7.0"]
linting = [
  "pre-commit>=3.4.0",
  "ruff>=0.0.287",
  "slotscheck",
  "types-click",
  "types-passlib",
  "types-python-jose",
  "types-pyyaml",
  "types-redis",
  "asyncpg-stubs",
  "pylint",
]
test = [
  "pytest",
  "pytest-xdist",
  "pytest-mock",
  "pytest-cov",
  "coverage",
  "pytest-sugar",
  "pytest-databases[redis]>=0.1.0",
]

[tool.black]
line-length = 120

[tool.ruff]
fix = true
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py311"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.isort]
known-first-party = ['tests', 'app']

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["-ra", "--ignore", "migrations"]
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
  "ignore::DeprecationWarning:litestar.constants.*",
  "ignore::DeprecationWarning:litestar.utils.*",
  "ignore::DeprecationWarning:litestar.cli.*",
  "ignore::DeprecationWarning:httpx._client",
]
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'uv.lock'
